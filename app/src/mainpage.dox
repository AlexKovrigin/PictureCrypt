/*!
\mainpage PictureCrypt
Project made using QT Creator in C++

\section about About
A simple cross-platform steganography project which hides data in images.
This project is built using MVC pattern and features GUI.
[Qt](https://qt.io) and [QAESEncryption](https://github.com/bricke/Qt-AES) by [bricke](https://github.com/bricke) were used.
You can read more about project at the [home page](../)

\section structure Structure of the project
As written earlier this project is structured with MVC pattern. Here is a small graph showing the basic structure.
\dotfile structure.gv

\section ext-use External use
You can use ModelPC class separately from View and Control layer. You will need four files:

* modelpc.cpp
* modelpc.h
* aes/qaesencryption.cpp
* aes/qaesencryption.h

Then you can just `#include "modelpc.h"` and use API.

\section2 use_api API
Here is are the most important methods:
* ModelPC::encrypt
* ModelPC::decrypt

\section3 Showcase
\code{.cpp}
// Includes
#include "modelpc.h"
#include <QImage>
#include <QByteArray>
#include <QString>
#include <QDebug> // just for showcase

...

// Basic setup
QByteArray data("some_file.txt");
QImage *image = new QImage("some_big_enough_image.jpg");
QString key = "some_password";
int bitsUsed = 3; // must be from 1 to 8

// Encrypting
QString error1, error2;
QImage *normal_resultImage = ModelPC::Encrypt(
        data,
        image,
        1,
        key,
        bitsUsed,
        &error1);
QImage *advanced_resultImage = ModelPC::Encrypt(
        data,
        image,
        2, key,
        bitsUsed /* not really used here, so put here any number from 1 to 8*/,
        &error2);

// Decrypting with given mode
QString error3, error4, error5, error6;
QByteArray output_normal = ModelPC::Decrypt(
        normal_resultImage,
        key,
        1,
        &error3);
QByteArray output_advanced = ModelPC::Decrypt(
        advanced_resultImage,
        key,
        2,
        &error4);

// Decrypting without given mode
// PictureCrypt can detect the mode of the image and adapt.
QByteArray output_normal_undefined = ModelPC::Decrypt(
        normal_resultImage,
        key,
        0,
        &error5);
QByteArray output_advanced_undefined = ModelPC::Decrypt(
        advanced_resultImage,
        key,
        0,
        &error6);

// Check (better testing with [running tests](#run-tests)
bool data_good =
        data == output_normal &&
        data == output_advanced &&
        data == output_normal_undefined &&
        data == output_advanced_undefined;
bool no_errors =
        error1 == "ok" &&
        error2 == "ok" &&
        error3 == "ok" &&
        error4 == "ok" &&
        error5 == "ok" &&
        error6 == "ok";
if(data_good && no_errors)
    qDebug() << "PASS";
else
    qDebug() << "FAIL";

```

\section license License
This software is provided under the [UNLICENSE](http://unlicense.org)

\section contact Contact us
Visit my site: https://www.alexkovrigin.me

Email me at a.kovrigin0@gmail.com

\author Alex Kovrigin (waleko)
\copyright Alex Kovrigin 2018
![gravatar](https://avatars2.githubusercontent.com/u/24986722?s=100)
 */
